#include <algorithm>

using std::max;
using std::min;


Element*
LOCATE_FUNC (Mesh_connectivity *mesh,
	     Element *entry,
	     VEC v, 
	     FUNC func,
	     Deformation_state * def)
{
  assert (entry->valid());

 again:
  Face * exit = 0;
  Real min_vol = 0.0;
  for (int j = 0 ;  j < entry->simplex ().count (); j++)
    {
      Face * f = entry->face (j);

      Real vol = DEFORMED_SIMPLEX_VOLUME (f->simplex(), v,
					  func, def);
      if (vol < min_vol)
	{
	  exit = f;
	  min_vol = vol;
	}
    }

  if (!exit)
    return entry;

  if (!exit->mate ())
    return 0;
  else
    {
      entry = exit->mate ()->element();
      if (VOLUME (entry->simplex(), func, def) < 0)
	{
	  return 0 ; 
	}
      
      // tail recursion      
      goto again;
    }

  return 0 ;			// unreachable.
}

 

void
MINMAX_EDGE_LENGTH (Real *minl, Real *maxl, Simplex const & pl,
		    FUNC func, Deformation_state const *def
		    )
{
  *minl = 1e6;
  *maxl = 0;
  for (int i = 0; i < pl.count(); i++)
    for (int j = i+1; j < pl.count(); j++)
      {
	Real a = euclidian_distance ((*func)(pl.node(i), def),
				     (*func)(pl.node(j), def));
	
	*minl = min (*minl, a);
	*maxl = max (*maxl, a);
      }
}
